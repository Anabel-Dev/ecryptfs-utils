
=pod

=head1 NAME

eCryptfs - an enterprise-class cryptographic filesystem for linux

=head1 SYNOPSIS

B<mount -t ecryptfs>
[I<SRC DIR>]
[I<DST DIR>]
B<-o>
[I<OPTIONS>]

=head1 DESCRIPTION

eCryptfs is a POSIX-compliant enterprise-class stacked cryptographic
filesystem for Linux. It is derived from Erez Zadok's Cryptfs, implemented
through the FiST framework for generating stacked filesystems. eCryptfs
extends Cryptfs to provide advanced key management and policy features.
eCryptfs stores cryptographic metadata in the header of each file written,
so that encrypted files can be copied between hosts; the file will be
decryptable with the proper key, and there is no need to keep track of any
additional information aside from what is already in the encrypted file
itself. Think of eCryptfs as a sort of "gnupgfs."

=head1 OPTIONS

=head2 STANDARD OPTIONS

=over 10

=item B<key=(keytype):[Key Options]>

Specify the type of key to be used when mounting eCryptfs.

=item B<ecryptfs_cipher=(cipher)>

Specify the symmetric cipher to be used on a per file basis

=item B<ecryptfs_key_bytes=(key_bytes)>

Specify the keysize to be used with the selected cipher. If the cipher
only has one keysize the keysize does not need to be specified.

=item B<ecryptfs_passthrough>

Allows for non-eCryptfs files to be read and written from within an
eCryptfs mount. This option is turned off by default.

=item B<no_sig_cache>

Do not check the mount key signature against the values in the user's
~/.ecryptfs/sig-cache.txt file. This is useful for such things as
non-interactive setup scripts, so that the mount helper does not stop
and prompt the user in the event that the key sig is not in the cache.

=item B<ecryptfs_encrypted_view>

This option, when set, will have eCryptfs return the encrypted
versions of the lower files, rather than decrypt encrypted files and
return the decrypted data from the lower files. This options is useful
for such things as backup utilities.

=item B<ecryptfs_xattr>

Store the metadata in the extended attribute of the lower files rather
than the header region of the lower files.

=item B<verbosity=(level)>

Set to '1' in order to get verbose output from the kernel module. As a
word of caution, this will cause secret values to be written in the
clear to the system log, so this options should only be used for
debugging purposes.

=head2 KEY OPTIONS

=item B<passwd=(passphrase)>

The actual password is password. Since the password is visible to utilities
(like ’ps’ under Unix) this form should only be used where security is not
important.

=item B<passfile=(filename)>

The password should be specified in a file with B<passwd=(passphrase)>. It is
highly reccomended that the file be stored on a secure medium such as a
personal usb key.

=item B<passfd=(file descriptor)>

The password is specified through the specified file descriptor.

=item B<passstdin>

The user types their passphrase in through stdin.

=item B<salt=(hex value)>

The salt should be specified as a 16 digit hex value. 

=item B<keyfile=(filename)>

The filename should be the filename of a file containing an RSA SSL key.

=head1 SEE ALSO

L<mount(8)|mount(8)>

=head1 NOTES

Do not run eCryptfs in higher verbosity levels
unless you are doing so for the sole purpose of development, since
secret values will be written out to the system log in that case.

=head1 BUGS

Please send bug reports to the lead developer, an eCryptfs mailing
list hosted from SourceForge, or to the SourceForge bug tracker for
the eCryptfs project. For kernel bugs, please follow the procedure
detailed in Documentation/oops-tracing.txt to help us figure out what
is happening.


=cut
