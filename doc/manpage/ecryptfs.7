.TH ecryptfs 7 2008-07-21 ecryptfs-utils "eCryptfs"
.SH NAME
eCryptfs \- an enterprise-class cryptographic filesystem for linux

.SH SYNOPSIS
.BI "mount -t ecryptfs [SRC DIR] [DST DIR] -o [OPTIONS]"

.SH DESCRIPTION
eCryptfs is a POSIX-compliant enterprise-class stacked cryptographic filesystem for Linux. It is derived from Erez Zadok's Cryptfs, implemented through the FiST framework for generating stacked filesystems. eCryptfs extends Cryptfs to provide advanced key management and policy features.  eCryptfs stores cryptographic metadata in the header of each file written, so that encrypted files can be copied between hosts; the file will be decryptable with the proper key, and there is no need to keep track of any additional information aside from what is already in the encrypted file itself. Think of eCryptfs as a sort of "gnupgfs."

.SH OPTIONS

STANDARD OPTIONS
.TP
.B key=(keytype):[Key Options]
Specify the type of key to be used when mounting eCryptfs.
.TP
.B ecryptfs_cipher=(cipher)
Specify the symmetric cipher to be used on a per file basis
.TP
.B ecryptfs_key_bytes=(key_bytes)
Specify the keysize to be used with the selected cipher. If the cipher only has one keysize the keysize does not need to be specified.
.TP
.B ecryptfs_passthrough
Allows for non-eCryptfs files to be read and written from within an eCryptfs mount. This option is turned off by default.
.TP
.B no_sig_cache
Do not check the mount key signature against the values in the user's ~/.ecryptfs/sig-cache.txt file. This is useful for such things as non-interactive setup scripts, so that the mount helper does not stop and prompt the user in the event that the key sig is not in the cache.
.TP
.B ecryptfs_encrypted_view
This option, when set, will have eCryptfs return the encrypted versions of the lower files, rather than decrypt encrypted files and return the decrypted data from the lower files. This options is useful for such things as backup utilities.
.TP
.B ecryptfs_xattr
Store the metadata in the extended attribute of the lower files rather than the header region of the lower files.
.TP

KEY MODULE OPTIONS

Parameters that apply to individual key modules have the alias for the key module in the prefix of the parameter name.

.TP
.B passphrase_passwd=(passphrase)
The actual password is password. Since the password is visible to utilities (like ps under Unix) this form should only be used where security is not important.
.TP
.B passphrase_passwd_file=(filename)
The password should be specified in a file with passwd=(passphrase). It is highly reccomended that the file be stored on a secure medium such as a personal usb key.
.TP
.B passphrase_passwd_fd=(file descriptor)
The password is specified through the specified file descriptor.
.TP
.B passphrase_salt=(hex value)
The salt should be specified as a 16 digit hex value.
.TP
.B openssl_keyfile=(filename)
The filename should be the filename of a file containing an RSA SSL key.

.SH SEE ALSO
.PD 0
.TP
\fBmount\fP(8)

.TP
\fI/usr/share/doc/ecryptfs-utils/ecryptfs-faq.html\fP

.TP
\fIhttp://ecryptfs.sourceforge.net/\fP
.PD

.SH NOTES
Do not run eCryptfs in higher verbosity levels unless you are doing so for the sole purpose of development, since secret values will be written out to the system log in that case.

.SH BUGS
Please send bug reports to the lead developer, an eCryptfs mailing list hosted from SourceForge, or to the SourceForge bug tracker for the eCryptfs project. For kernel bugs, please follow the procedure detailed in Documentation/oops-tracing.txt to help us figure out what is happening.

.SH AUTHOR
This manpage was (re-)written by Dustin Kirkland <kirkland@canonical.com> for Ubuntu systems (but may be used by others).  Permission is granted to copy, distribute and/or modify this document under the terms of the GNU General Public License, Version 2 or any later version published by the Free Software Foundation.

On Debian systems, the complete text of the GNU General Public License can be found in /usr/share/common-licenses/GPL.
.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ECRYPTFS 7"
.TH ECRYPTFS 7 "2008-04-03" "41" "eCryptfs"
.SH "NAME"
eCryptfs \- an enterprise\-class cryptographic filesystem for Linux
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBmount \-t ecryptfs\fR
[\fI\s-1SRC\s0 \s-1DIR\s0\fR]
[\fI\s-1DST\s0 \s-1DIR\s0\fR]
\&\fB\-o\fR
[\fI\s-1OPTIONS\s0\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
eCryptfs is a POSIX-compliant enterprise-class stacked cryptographic
filesystem for Linux. It is derived from Erez Zadok's Cryptfs, implemented
through the FiST framework for generating stacked filesystems. eCryptfs
extends Cryptfs to provide advanced key management and policy features.
eCryptfs stores cryptographic metadata in the header of each file written,
so that encrypted files can be copied between hosts; the file will be
decryptable with the proper key, and there is no need to keep track of any
additional information aside from what is already in the encrypted file
itself. Think of eCryptfs as a sort of \*(L"gnupgfs.\*(R"
.SH "OPTIONS"
.IX Header "OPTIONS"
.Sh "\s-1STANDARD\s0 \s-1OPTIONS\s0"
.IX Subsection "STANDARD OPTIONS"
.IP "\fBkey=(keytype):[Key Options]\fR" 10
.IX Item "key=(keytype):[Key Options]"
Specify the type of key to be used when mounting eCryptfs.
.IP "\fBecryptfs_cipher=(cipher)\fR" 10
.IX Item "ecryptfs_cipher=(cipher)"
Specify the symmetric cipher to be used on a per file basis
.IP "\fBecryptfs_key_bytes=(key_bytes)\fR" 10
.IX Item "ecryptfs_key_bytes=(key_bytes)"
Specify the keysize to be used with the selected cipher. If the cipher
only has one keysize the keysize does not need to be specified.
.IP "\fBecryptfs_passthrough\fR" 10
.IX Item "ecryptfs_passthrough"
Allows for non-eCryptfs files to be read and written from within an
eCryptfs mount. This option is turned off by default.
.IP "\fBno_sig_cache\fR" 10
.IX Item "no_sig_cache"
Do not check the mount key signature against the values in the user's
~/.ecryptfs/sig\-cache.txt file. This is useful for such things as
non-interactive setup scripts, so that the mount helper does not stop
and prompt the user in the event that the key sig is not in the cache.
.IP "\fBecryptfs_encrypted_view\fR" 10
.IX Item "ecryptfs_encrypted_view"
This option, when set, will have eCryptfs return the encrypted
versions of the lower files, rather than decrypt encrypted files and
return the decrypted data from the lower files. This options is useful
for such things as backup utilities.
.IP "\fBecryptfs_xattr\fR" 10
.IX Item "ecryptfs_xattr"
Store the metadata in the extended attribute of the lower files rather
than the header region of the lower files.
.Sh "\s-1KEY\s0 \s-1OPTIONS\s0"
.IX Subsection "KEY OPTIONS"
.IP "\fBpassphrase_passwd=(passphrase)\fR" 10
.IX Item "passphrase_passwd=(passphrase)"
The actual password is password. Since the password is visible to utilities
(like ’ps’ under Unix) this form should only be used where security is not
important.
.IP "\fBpassphrase_passwd_file=(filename)\fR" 10
.IX Item "passphrase_passwd_file=(filename)"
The password should be specified in a file with \fBpasswd=(passphrase)\fR. It is
highly reccomended that the file be stored on a secure medium such as a
personal usb key.
.IP "\fBpassphrase_passwd_fd=(file descriptor)\fR" 10
.IX Item "passphrase_passwd_fd=(file descriptor)"
The password is specified through the specified file descriptor.
.IP "\fBpassphrase_passstdin\fR" 10
.IX Item "passphrase_passstdin"
The user types their passphrase in through stdin.
.IP "\fBsalt=(hex value)\fR" 10
.IX Item "passphrase_salt=(hex value)"
The salt should be specified as a 16 digit hex value. 
.IP "\fBkeyfile=(filename)\fR" 10
.IX Item "openssl_keyfile=(filename)"
The filename should be the filename of a file containing an \s-1RSA\s0 \s-1SSL\s0 key.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fImount\fR\|(8)
.SH "NOTES"
.IX Header "NOTES"
Do not run eCryptfs in higher verbosity levels
unless you are doing so for the sole purpose of development, since
secret values will be written out to the system log in that case.
.SH "BUGS"
.IX Header "BUGS"
Please send bug reports to the lead developer, an eCryptfs mailing
list hosted from SourceForge, or to the SourceForge bug tracker for
the eCryptfs project. For kernel bugs, please follow the procedure
detailed in Documentation/oops\-tracing.txt to help us figure out what
is happening.
