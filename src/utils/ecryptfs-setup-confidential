#!/bin/sh
# This script sets up an ecryptfs mount in a user's ~/Private, configures
# fstab, pam, and bash to attach and wrap on login.
#
# Originally ecryptfs-setup-pam-wrapped.sh by Michael Halcrow, IBM
#
# Ported for use on Ubuntu by Dustin Kirkland <kirkland@canonical.com>
# Copyright (C) 2008 Canonical Ltd.
# Copyright (C) 2007-2008 International Business Machines

usage() {
	echo 
	echo "Usage:"
	echo "# $0 [--username USER]"
	echo "  [--loginpass LOGINPASS] [--mountpass MOUNTPASS]"
	echo "  [--mountpoint MOUNTPOINT] [--cryptdir CRYPTDIR]"
	echo
	echo " --username   Username for encrypted confidential mountpoint"
	echo " --loginpass  System passphrase for USER, used to wrap MOUNTPASS"
	echo " --mountpass  Passphrase for mounting the ecryptfs directory"
	echo " --mountpoint Defaults to ~USER/Private, override here"
	echo " --cryptdir   Defaults to ~USER/.Private, override here"
	echo
	echo "   Be sure to properly escape your parameters according to your"
	echo "   shell's special character nuances, and also surround the"
	echo "   parameters by double quotes, if necessary."
	echo
	echo "   Any of these parameters may be:"
	echo "     1) exported as environment variables (USER, MOUNTPASS,"
	echo "        LOGINPASS, MOUNTPOINT, CRYPTDIR)"
	echo "     2) specified on the command line"
	echo "     3) left empty and interactively prompted"
	echo
	echo "   BEWARE: They will, however, be displayed on STDOUT, so be"
	echo "   wary of shoulder surfers."
	echo
	exit 1
}

error() {
	echo "ERROR: $1"
	exit 1
}

if [ ! -z "$SUDO_USER" ]; then
	USER="$SUDO_USER"
fi

while [ ! -z "$1" ]; do
	case "$1" in
		--username)
                        USER="$2"
			shift 2
		;;
		--loginpass)
			LOGINPASS="$2"
			shift 2
		;;
		--mountpass)
			MOUNTPASS="$2"
			shift 2
		;;
		--mountpoint)
			MOUNTPOINT="$2"
			shift 2
		;;
		--cryptdir)
			CRYPTDIR="$2"
			shift 2
		;;
		*)
			usage
		;;
	esac
done

if [ -z "$USER" ]; then
	read -p "Enter the username: " -r USER
	if [ -z "$USER" ]; then
		error "You must provide a username"
	fi
fi
if ! grep "^$USER:" /etc/passwd >/dev/null; then
	error "User [$USER] does not exist"
fi

HOME=`grep "^$USER:" /etc/passwd | awk -F: '{print $6}'`
if [ ! -d "$HOME" ]; then
	error "User home directory [$HOME] does not exist"
fi

if [ -z "$LOGINPASS" ]; then
	read -p "Enter your login passphrase: " -r LOGINPASS
	if [ -z "$LOGINPASS" ]; then
		error "You must provide the login passphrase"
	fi
fi

if [ -z "$MOUNTPASS" ]; then
	read -p "Enter your mount passphrase [leave blank to generate one]: " -r MOUNTPASS
	if [ -z "$MOUNTPASS" ]; then
		# Pull 128 bits of random data from /dev/urandom, and convert
		# to a string of 32 hex digits
		MOUNTPASS=`head -c 16 /dev/urandom | od -x | head -n 1 |sed "s/^0000000//" | sed "s/\s*//g"`
	fi
fi

if [ -z "$MOUNTPOINT" ]; then
	read -p "Enter the confidential mountpoint [$HOME/Private]: " -r MOUNTPOINT
	if [ -z "$MOUNTPOINT" ]; then
		MOUNTPOINT="$HOME/Private"
	fi
fi

if [ -z "$CRYPTDIR" ]; then
	basename=`basename "$MOUNTPOINT"`
	dir=`echo "$MOUNTPOINT" | sed "s/$basename$/\.$basename/"`
	read -p "Enter the encrypted directory [$dir]: " -r CRYPTDIR
	if [ -z "$CRYPTDIR" ]; then
		CRYPTDIR="$dir"
	fi
fi

if [ -f "/etc/pam.d/system-auth" ]; then
	PAM_CONF=/etc/pam.d/system-auth
elif [ -f "/etc/pam.d/common-auth" ]; then
	PAM_CONF=/etc/pam.d/common-auth
else
	error "Cannot determine location of PAM system/common auth configuration"
fi

if [ -f "/lib/security/libpam_ecryptfs.so" ]; then
	PAM_LIB=libpam_ecryptfs.so
elif [ -f "/lib/security/pam_ecryptfs.so" ]; then
	PAM_LIB=pam_ecryptfs.so
else
	error "Cannot find ecryptfs PAM library"
fi
echo "Using username [$USER]"
echo "Using mount passphrase [$MOUNTPASS]"
echo "Using login passphrase [$LOGINPASS]"
echo "Using mount point [$MOUNTPOINT]"
echo "Using encrypted dir [$CRYPTDIR]"
echo "Using pam configuration file [$PAM_CONF]"
echo
echo "This script will attempt to set up your system to mount"
echo "$MOUNTPOINT with eCryptfs automatically on login,"
echo "using your login passphrase."
echo
echo "************************************************************************"
echo "YOU SHOULD RECORD THIS MOUNT PASSPHRASE AND STORE IN A SAFE LOCATION:"
echo "$MOUNTPASS"
echo "THIS WILL BE REQUIRED IF YOU NEED TO RECOVER YOUR DATA AT A LATER TIME."
echo "************************************************************************"
echo

###############################################################################

# Setup confidential directory in home
sudo modprobe ecryptfs || error "Could not load ecryptfs driver"
mkdir -m 500 -p "$CRYPTDIR" || error "Could not create crypt directory [$CRYPTDIR]"
mkdir -m 700 -p "$MOUNTPOINT" || error "Could not create mount directory [$MOUNTPOINT]"
chmod 700 "$MOUNTPOINT" || error "Could not change permissions on [$MOUNTPOINT]"
touch "$MOUNTPOINT"/"NOT MOUNTED - Run ecryptfs-mount-confidential to mount this directory"
chmod 500 "$MOUNTPOINT"

# Check for an active mount
sudo umount "$MOUNTPOINT" 2>/dev/null
if mount | grep "$MOUNTPOINT type ecryptfs"; then
	error "[$MOUNTPOINT] still mounted after umount"
fi

# Prune out of fstab
tmpfile=`mktemp`
grep -v "$MOUNTPOINT.*,ecryptfs_sig=.*" /etc/fstab > $tmpfile
chmod --reference /etc/fstab $tmpfile
sudo chown --reference /etc/fstab $tmpfile || error "Could not update /etc/fstab"
sudo mv -f $tmpfile /etc/fstab || error "Could not update /etc/fstab"

# Setup /etc/fstab
# BUG: passwd will be momentarily visible in "ps -ef" output
sudo mount -t ecryptfs "$CRYPTDIR" "$MOUNTPOINT" -o key=passphrase:passwd="$MOUNTPASS",ecryptfs_cipher=aes,ecryptfs_key_bytes=16,ecryptfs_passthrough=n,no_sig_cache || error "Could not perform test ecryptfs mount"
mtab=`cat /etc/mtab | grep "$CRYPTDIR $MOUNTPOINT ecryptfs rw,ecryptfs_sig=" | sed "s/\s0\s0$/,user,noauto 0 0/"`
tmpfile1=`mktemp`
cat /etc/fstab > $tmpfile1
echo "$mtab" >> $tmpfile1
chmod --reference /etc/fstab $tmpfile1
sudo chown --reference /etc/fstab $tmpfile1
sudo mv -f $tmpfile1 /etc/fstab || error "Could not append mount to /etc/fstab"
sudo umount "$MOUNTPOINT" || error "Could not unmount [$MOUNTPOINT]"

# Setup PAM
tmpfile1=`mktemp`
grep -v "pam_ecryptfs.so" $PAM_CONF > $tmpfile1
tmpfile2=`mktemp`
grep -B 100000 "auth\s.*pam_unix.so" $tmpfile1 | grep -v "auth\s.*pam_unix.so" > $tmpfile2
echo "password required $PAM_LIB" >> $tmpfile2
grep "auth\s.*pam_unix.so" $PAM_CONF >> $tmpfile2
echo "auth required $PAM_LIB unwrap" >> $tmpfile2
grep -A 100000 "auth\s.*pam_unix.so" $tmpfile1 | grep -v "auth\s.*pam_unix.so" >> $tmpfile2
rm -f $tmpfile1
chmod --reference $PAM_CONF $tmpfile2
sudo chown --reference $PAM_CONF $tmpfile2 || error "Could not update PAM configuration"
sudo mv -f $tmpfile2 $PAM_CONF || error "Could not update PAM configuration"

# Setup bash profile
if ! grep "ecryptfs-mount-confidential" $HOME/.bash_profile >/dev/null; then
	echo "ecryptfs-mount-confidential" >> $HOME/.bash_profile || error "Could not configure bash profile"
fi
if ! grep "ecryptfs-umount-confidential" $HOME/.bash_logout >/dev/null; then
	echo "ecryptfs-umount-confidential" >> $HOME/.bash_logout || error "Could not configure bash logout"
fi

# Setup gnome desktop autostart
mkdir -p $HOME/.config/autostart/ 2>/dev/null
echo "
[Desktop Entry]
Type=Application
Name=Ecryptfs Mount Private
Exec=/usr/bin/ecryptfs-mount-confidential
X-GNOME-Autostart-enabled=true
" > $HOME/.config/autostart/ecryptfs-mount-confidential.desktop || error "Could not create desktop autostart file"

# Setup ~/.ecryptfs directory
mkdir -m 700 $HOME/.ecryptfs 2>/dev/null
touch $HOME/.ecryptfs/auto-mount || error "Could not setup ecryptfs auto-mount"
# Backup any existing wrapped-passphrase
if [ -z "$HOME/.ecryptfs/wrapped-passphrase" ]; then
	timestamp=`date +%Y%m%d%H%M%S`
	mv -f $HOME/.ecryptfs/wrapped-passphrase $HOME/.ecryptfs/wrapped-passphrase.$timestamp
fi
# BUG: passphrases will be momentarily visible in "ps -ef" output
ecryptfs-wrap-passphrase $HOME/.ecryptfs/wrapped-passphrase "$MOUNTPASS" "$LOGINPASS"
chmod 400 $HOME/.ecryptfs/wrapped-passphrase
chown $USERNAME:$USERNAME $HOME/.ecryptfs/wrapped-passphrase

# Setup .ecryptfs/confidential to store the confidential mountpoint
tmpfile1=`mktemp $HOME/.ecryptfs/confidential.XXXXXX`
chmod 400 $tmpfile1
chown $USERNAME:$USERNAME $tmpfile1
grep -v "CONFIDENTIAL=" $HOME/.ecryptfs/confidential > $tmpfile1
echo "CONFIDENTIAL=\"$MOUNTPOINT\"" >> $tmpfile1
mv -f $tmpfile1 $HOME/.ecryptfs/confidential

echo
echo "Done."
echo
echo "$USERNAME should log in and check the output of the 'mount' command."
echo
exit 0
